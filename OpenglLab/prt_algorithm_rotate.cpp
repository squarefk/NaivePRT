#include "prt_algorithm.h"

void PrtAlgorithm::rotate_z(const std::vector<glm::vec3>& vin, std::vector<glm::vec3>& vout, float angle) {
	sin_coeff[0] = 0;
	cos_coeff[0] = 1;
	sin_coeff[1] = sin(angle);
	cos_coeff[1] = cos(angle);
	for (int l = 2; l <= lmax; ++l) {
		sin_coeff[l] = sin_coeff[l - 1] * cos_coeff[1] + cos_coeff[l - 1] * sin_coeff[1];
		cos_coeff[l] = cos_coeff[l - 1] * cos_coeff[1] - sin_coeff[l - 1] * sin_coeff[1];
	}
	for (int i = 0; i < (lmax + 1) * (lmax + 1); ++i) {
		vout.push_back(glm::vec3(0, 0, 0));
	}
	vout[0] = vin[0];
	for (int l = 1; l <= lmax; ++l) {
		for (int m = -l; m < 0; ++m)
			vout[p(l, m)] = cos_coeff[-m] * vin[p(l, m)] - sin_coeff[-m] * vin[p(l, -m)];
		vout[p(l, 0)] = vin[p(l, 0)];
		for (int m = 1; m <= l; ++m)
			vout[p(l, m)] = cos_coeff[m] * vin[p(l, m)] + sin_coeff[m] * vin[p(l, -m)];
	}
}

void PrtAlgorithm::rotate_x_minus(const std::vector<glm::vec3>& vin, std::vector<glm::vec3>& vout) {
	rotate_x_plus(vin, vout);
	for (int l = 1; l <= lmax; ++l) {
		float s = (l & 0x1) ? -1.f : 1.f;
		vout[p(l, 0)] *= s;
		for (int m = 1; m <= l; ++m) {
			s = -s;
			vout[p(l, m)] *= s;
			vout[p(l, -m)] *= -s;
		}
	}
}

void PrtAlgorithm::rotate_x_plus(const std::vector<glm::vec3>& vin, std::vector<glm::vec3>& vout) {
	if (lmax > 9) {
		fprintf(stderr, "Error, do not support lmax > 9.\n");
	}
	for (int i = 0; i < (lmax + 1) * (lmax + 1); ++i) {
		vout.push_back(glm::vec3(0,0,0));
	}

#define O(l, m)  vin[p(l, m)]

	int index = 0;
	// first band is a no-op
	vout[index++] = vin[0];

	if (lmax < 1) return;
	vout[index++] = (O(1, 0));
	vout[index++] = (-1.f*O(1, -1));
	vout[index++] = (O(1, 1));

	if (lmax < 2) return;
	vout[index++] = (O(2, 1));
	vout[index++] = (-1.f*O(2, -1));
	vout[index++] = (-0.5f*O(2, 0) - 0.8660254037844386f*O(2, 2));
	vout[index++] = (-1.f*O(2, -2));
	vout[index++] = (-0.8660254037844386f*O(2, 0) + 0.5f*O(2, 2));

	// Remainder of SH $x+$ rotation definition
	if (lmax < 3) return;
	vout[index++] = (-0.7905694150420949f*O(3, 0) + 0.6123724356957945f*O(3, 2));
	vout[index++] = (-1.f*O(3, -2));
	vout[index++] = (-0.6123724356957945f*O(3, 0) - 0.7905694150420949f*O(3, 2));
	vout[index++] = (0.7905694150420949f*O(3, -3) + 0.6123724356957945f*O(3, -1));
	vout[index++] = (-0.25f*O(3, 1) - 0.9682458365518543f*O(3, 3));
	vout[index++] = (-0.6123724356957945f*O(3, -3) + 0.7905694150420949f*O(3, -1));
	vout[index++] = (-0.9682458365518543f*O(3, 1) + 0.25f*O(3, 3));

	if (lmax < 4) return;
	vout[index++] = (-0.9354143466934853f*O(4, 1) + 0.35355339059327373f*O(4, 3));
	vout[index++] = (-0.75f*O(4, -3) + 0.6614378277661477f*O(4, -1));
	vout[index++] = (-0.35355339059327373f*O(4, 1) - 0.9354143466934853f*O(4, 3));
	vout[index++] = (0.6614378277661477f*O(4, -3) + 0.75f*O(4, -1));
	vout[index++] = (0.375f*O(4, 0) + 0.5590169943749475f*O(4, 2) + 0.739509972887452f*O(4, 4));
	vout[index++] = (0.9354143466934853f*O(4, -4) + 0.35355339059327373f*O(4, -2));
	vout[index++] = (0.5590169943749475f*O(4, 0) + 0.5f*O(4, 2) - 0.6614378277661477f*O(4, 4));
	vout[index++] = (-0.35355339059327373f*O(4, -4) + 0.9354143466934853f*O(4, -2));
	vout[index++] = (0.739509972887452f*O(4, 0) - 0.6614378277661477f*O(4, 2) + 0.125f*O(4, 4));

	if (lmax < 5) return;
	vout[index++] = (0.701560760020114f*O(5, 0) - 0.6846531968814576f*O(5, 2) +
		0.19764235376052372f*O(5, 4));
	vout[index++] = (-0.5f*O(5, -4) + 0.8660254037844386f*O(5, -2));
	vout[index++] = (0.5229125165837972f*O(5, 0) + 0.30618621784789724f*O(5, 2) -
		0.795495128834866f*O(5, 4));
	vout[index++] = (0.8660254037844386f*O(5, -4) + 0.5f*O(5, -2));
	vout[index++] = (0.4841229182759271f*O(5, 0) + 0.6614378277661477f*O(5, 2) +
		0.57282196186948f*O(5, 4));
	vout[index++] = (-0.701560760020114f*O(5, -5) - 0.5229125165837972f*O(5, -3) -
		0.4841229182759271f*O(5, -1));
	vout[index++] = (0.125f*O(5, 1) + 0.4050462936504913f*O(5, 3) + 0.9057110466368399f*O(5, 5));
	vout[index++] = (0.6846531968814576f*O(5, -5) - 0.30618621784789724f*O(5, -3) -
		0.6614378277661477f*O(5, -1));
	vout[index++] = (0.4050462936504913f*O(5, 1) + 0.8125f*O(5, 3) - 0.4192627457812106f*O(5, 5));
	vout[index++] = (-0.19764235376052372f*O(5, -5) + 0.795495128834866f*O(5, -3) -
		0.57282196186948f*O(5, -1));
	vout[index++] = (0.9057110466368399f*O(5, 1) - 0.4192627457812106f*O(5, 3) + 0.0625f*O(5, 5));

	if (lmax < 6) return;
	vout[index++] = (0.879452954966893f*O(6, 1) - 0.46351240544347894f*O(6, 3) +
		0.10825317547305482f*O(6, 5));
	vout[index++] = (-0.3125f*O(6, -5) + 0.8028270361665706f*O(6, -3) - 0.5077524002897476f*O(6, -1));
	vout[index++] = (0.4330127018922193f*O(6, 1) + 0.6846531968814576f*O(6, 3) -
		0.5863019699779287f*O(6, 5));
	vout[index++] = (0.8028270361665706f*O(6, -5) - 0.0625f*O(6, -3) - 0.5929270612815711f*O(6, -1));
	vout[index++] = (0.19764235376052372f*O(6, 1) + 0.5625f*O(6, 3) + 0.8028270361665706f*O(6, 5));
	vout[index++] = (-0.5077524002897476f*O(6, -5) - 0.5929270612815711f*O(6, -3) -
		0.625f*O(6, -1));
	vout[index++] = (-0.3125f*O(6, 0) - 0.45285552331841994f*O(6, 2) - 0.49607837082461076f*O(6, 4) -
		0.6716932893813962f*O(6, 6));
	vout[index++] = (-0.879452954966893f*O(6, -6) - 0.4330127018922193f*O(6, -4) -
		0.19764235376052372f*O(6, -2));
	vout[index++] = (-0.45285552331841994f*O(6, 0) - 0.53125f*O(6, 2) - 0.1711632992203644f*O(6, 4) +
		0.6952686081652184f*O(6, 6));
	vout[index++] = (0.46351240544347894f*O(6, -6) - 0.6846531968814576f*O(6, -4) -
		0.5625f*O(6, -2));
	vout[index++] = (-0.49607837082461076f*O(6, 0) - 0.1711632992203644f*O(6, 2) +
		0.8125f*O(6, 4) - 0.2538762001448738f*O(6, 6));
	vout[index++] = (-0.10825317547305482f*O(6, -6) + 0.5863019699779287f*O(6, -4) -
		0.8028270361665706f*O(6, -2));
	vout[index++] = (-0.6716932893813962f*O(6, 0) + 0.6952686081652184f*O(6, 2) -
		0.2538762001448738f*O(6, 4) + 0.03125f*O(6, 6));

	if (lmax < 7) return;
	vout[index++] = (-0.6472598492877494f*O(7, 0) + 0.6991205412874092f*O(7, 2) -
		0.2981060004427955f*O(7, 4) + 0.05846339666834283f*O(7, 6));
	vout[index++] = (-0.1875f*O(7, -6) + 0.6373774391990981f*O(7, -4) - 0.7473912964438374f*O(7, -2));
	vout[index++] = (-0.47495887979908324f*O(7, 0) - 0.07328774624724109f*O(7, 2) +
		0.78125f*O(7, 4) - 0.3983608994994363f*O(7, 6));
	vout[index++] = (0.6373774391990981f*O(7, -6) - 0.5f*O(7, -4) - 0.5863019699779287f*O(7, -2));
	vout[index++] = (-0.42961647140211f*O(7, 0) - 0.41984465132951254f*O(7, 2) +
		0.10364452469860624f*O(7, 4) + 0.7927281808728639f*O(7, 6));
	vout[index++] = (-0.7473912964438374f*O(7, -6) - 0.5863019699779287f*O(7, -4) -
		0.3125f*O(7, -2));
	vout[index++] = (-0.41339864235384227f*O(7, 0) - 0.5740991584648073f*O(7, 2) -
		0.5385527481129402f*O(7, 4) - 0.4576818286211503f*O(7, 6));
	vout[index++] = (0.6472598492877494f*O(7, -7) + 0.47495887979908324f*O(7, -5) +
		0.42961647140211f*O(7, -3) + 0.41339864235384227f*O(7, -1));
	vout[index++] = (-0.078125f*O(7, 1) - 0.24356964481437335f*O(7, 3) - 0.4487939567607835f*O(7, 5) -
		0.8562442974262661f*O(7, 7));
	vout[index++] = (-0.6991205412874092f*O(7, -7) + 0.07328774624724109f*O(7, -5) +
		0.41984465132951254f*O(7, -3) + 0.5740991584648073f*O(7, -1));
	vout[index++] = (-0.24356964481437335f*O(7, 1) - 0.609375f*O(7, 3) - 0.5700448858423344f*O(7, 5) +
		0.4943528756111367f*O(7, 7));
	vout[index++] = (0.2981060004427955f*O(7, -7) - 0.78125f*O(7, -5) - 0.10364452469860624f*O(7, -3) +
		0.5385527481129402f*O(7, -1));
	vout[index++] = (-0.4487939567607835f*O(7, 1) - 0.5700448858423344f*O(7, 3) + 0.671875f*O(7, 5) -
		0.14905300022139775f*O(7, 7));
	vout[index++] = (-0.05846339666834283f*O(7, -7) + 0.3983608994994363f*O(7, -5) -
		0.7927281808728639f*O(7, -3) + 0.4576818286211503f*O(7, -1));
	vout[index++] = (-0.8562442974262661f*O(7, 1) + 0.4943528756111367f*O(7, 3) -
		0.14905300022139775f*O(7, 5) + 0.015625f*O(7, 7));

	if (lmax < 8) return;
	vout[index++] = (-0.8356088723200586f*O(8, 1) + 0.516334738808072f*O(8, 3) -
		0.184877493221863f*O(8, 5) + 0.03125f*O(8, 7));
	vout[index++] = (-0.109375f*O(8, -7) + 0.4621937330546575f*O(8, -5) - 0.774502108212108f*O(8, -3) +
		0.4178044361600293f*O(8, -1));
	vout[index++] = (-0.4576818286211503f*O(8, 1) - 0.47134697278119864f*O(8, 3) +
		0.7088310138883598f*O(8, 5) - 0.2567449488305466f*O(8, 7));
	vout[index++] = (0.4621937330546575f*O(8, -7) - 0.703125f*O(8, -5) - 0.2181912506838897f*O(8, -3) +
		0.4943528756111367f*O(8, -1));
	vout[index++] = (-0.27421763710600383f*O(8, 1) - 0.6051536478449089f*O(8, 3) -
		0.33802043207474897f*O(8, 5) + 0.6665852814906732f*O(8, 7));
	vout[index++] = (-0.774502108212108f*O(8, -7) - 0.2181912506838897f*O(8, -5) +
		0.265625f*O(8, -3) + 0.5310201708739509f*O(8, -1));
	vout[index++] = (-0.1307281291459493f*O(8, 1) - 0.38081430021731066f*O(8, 3) -
		0.5908647000371574f*O(8, 5) - 0.6991205412874092f*O(8, 7));
	vout[index++] = (0.4178044361600293f*O(8, -7) + 0.4943528756111367f*O(8, -5) +
		0.5310201708739509f*O(8, -3) + 0.546875f*O(8, -1));
	vout[index++] = (0.2734375f*O(8, 0) + 0.3921843874378479f*O(8, 2) + 0.4113264556590057f*O(8, 4) +
		0.4576818286211503f*O(8, 6) + 0.626706654240044f*O(8, 8));
	vout[index++] = (0.8356088723200586f*O(8, -8) + 0.4576818286211503f*O(8, -6) +
		0.27421763710600383f*O(8, -4) + 0.1307281291459493f*O(8, -2));
	vout[index++] = (0.3921843874378479f*O(8, 0) + 0.5f*O(8, 2) + 0.32775276505317236f*O(8, 4) -
		0.6991205412874092f*O(8, 8));
	vout[index++] = (-0.516334738808072f*O(8, -8) + 0.47134697278119864f*O(8, -6) +
		0.6051536478449089f*O(8, -4) + 0.38081430021731066f*O(8, -2));
	vout[index++] = (0.4113264556590057f*O(8, 0) + 0.32775276505317236f*O(8, 2) -
		0.28125f*O(8, 4) - 0.7302075903467452f*O(8, 6) + 0.3332926407453366f*O(8, 8));
	vout[index++] = (0.184877493221863f*O(8, -8) - 0.7088310138883598f*O(8, -6) +
		0.33802043207474897f*O(8, -4) + 0.5908647000371574f*O(8, -2));
	vout[index++] = (0.4576818286211503f*O(8, 0) - 0.7302075903467452f*O(8, 4) + 0.5f*O(8, 6) -
		0.0855816496101822f*O(8, 8));
	vout[index++] = (-0.03125f*O(8, -8) + 0.2567449488305466f*O(8, -6) - 0.6665852814906732f*O(8, -4) +
		0.6991205412874092f*O(8, -2));
	vout[index++] = (0.626706654240044f*O(8, 0) - 0.6991205412874092f*O(8, 2) +
		0.3332926407453366f*O(8, 4) - 0.0855816496101822f*O(8, 6) + 0.0078125f*O(8, 8));

	if (lmax < 9) return;
	vout[index++] = (0.6090493921755238f*O(9, 0) - 0.6968469725305549f*O(9, 2) +
		0.3615761395439417f*O(9, 4) - 0.11158481919598204f*O(9, 6) + 0.016572815184059706f*O(9, 8));
	vout[index++] = (-0.0625f*O(9, -8) + 0.3156095293238149f*O(9, -6) - 0.6817945071647321f*O(9, -4) +
		0.656993626300895f*O(9, -2));
	vout[index++] = (0.44314852502786806f*O(9, 0) - 0.05633673867912483f*O(9, 2) - 0.6723290616859425f*O(9, 4) +
		0.5683291712335379f*O(9, 6) - 0.1594400908746762f*O(9, 8));
	vout[index++] = (0.3156095293238149f*O(9, -8) - 0.71875f*O(9, -6) + 0.20252314682524564f*O(9, -4) +
		0.5854685623498499f*O(9, -2));
	vout[index++] = (0.39636409043643195f*O(9, 0) + 0.25194555463432966f*O(9, 2) - 0.3921843874378479f*O(9, 4) -
		0.6051536478449089f*O(9, 6) + 0.509312687906457f*O(9, 8));
	vout[index++] = (-0.6817945071647321f*O(9, -8) + 0.20252314682524564f*O(9, -6) + 0.5625f*O(9, -4) +
		0.4215855488510013f*O(9, -2));
	vout[index++] = (0.3754879637718099f*O(9, 0) + 0.42961647140211f*O(9, 2) + 0.13799626353637262f*O(9, 4) -
		0.2981060004427955f*O(9, 6) - 0.7526807559068452f*O(9, 8));
	vout[index++] = (0.656993626300895f*O(9, -8) + 0.5854685623498499f*O(9, -6) + 0.4215855488510013f*O(9, -4) +
		0.21875f*O(9, -2));
	vout[index++] = (0.36685490255855924f*O(9, 0) + 0.5130142237306876f*O(9, 2) + 0.4943528756111367f*O(9, 4) +
		0.4576818286211503f*O(9, 6) + 0.38519665736315783f*O(9, 8));
	vout[index++] = (-0.6090493921755238f*O(9, -9) - 0.44314852502786806f*O(9, -7) - 0.39636409043643195f*O(9, -5) -
		0.3754879637718099f*O(9, -3) - 0.36685490255855924f*O(9, -1));
	vout[index++] = (0.0546875f*O(9, 1) + 0.16792332234534904f*O(9, 3) + 0.2954323500185787f*O(9, 5) +
		0.4624247721758373f*O(9, 7) + 0.8171255055356398f*O(9, 9));
	vout[index++] = (0.6968469725305549f*O(9, -9) + 0.05633673867912483f*O(9, -7) - 0.25194555463432966f*O(9, -5) -
		0.42961647140211f*O(9, -3) - 0.5130142237306876f*O(9, -1));
	vout[index++] = (0.16792332234534904f*O(9, 1) + 0.453125f*O(9, 3) + 0.577279787559724f*O(9, 5) +
		0.387251054106054f*O(9, 7) - 0.5322256665703469f*O(9, 9));
	vout[index++] = (-0.3615761395439417f*O(9, -9) + 0.6723290616859425f*O(9, -7) + 0.3921843874378479f*O(9, -5) -
		0.13799626353637262f*O(9, -3) - 0.4943528756111367f*O(9, -1));
	vout[index++] = (0.2954323500185787f*O(9, 1) + 0.577279787559724f*O(9, 3) + 0.140625f*O(9, 5) -
		0.7162405240429014f*O(9, 7) + 0.21608307321780204f*O(9, 9));
	vout[index++] = (0.11158481919598204f*O(9, -9) - 0.5683291712335379f*O(9, -7) + 0.6051536478449089f*O(9, -5) +
		0.2981060004427955f*O(9, -3) - 0.4576818286211503f*O(9, -1));
	vout[index++] = (0.4624247721758373f*O(9, 1) + 0.387251054106054f*O(9, 3) - 0.7162405240429014f*O(9, 5) +
		0.34765625f*O(9, 7) - 0.048317644050206957f*O(9, 9));
	vout[index++] = (-0.016572815184059706f*O(9, -9) + 0.1594400908746762f*O(9, -7) - 0.509312687906457f*O(9, -5) +
		0.7526807559068452f*O(9, -3) - 0.38519665736315783f*O(9, -1));
	vout[index++] = (0.8171255055356398f*O(9, 1) - 0.5322256665703469f*O(9, 3) + 0.21608307321780204f*O(9, 5) -
		0.048317644050206957f*O(9, 7) + 0.00390625f*O(9, 9));

#undef O
}
